Política de Nomenclatura para Desarrollo de Software

-En cualquier proyecto de desarrollo de software, la consistencia en la nomenclatura es esencial para garantizar la legibilidad, 
 mantenibilidad y colaboración efectiva en el código. Esta política establece pautas claras para nombrar bases de datos, variables, 
 funciones, clases, ramas de Git y otros elementos importantes en el desarrollo de software.

Bases de Datos

- Nombres de Bases de Datos: Los nombres de las bases de datos deben ser descriptivos y concisos, evitando abreviaturas confusas o 
  acrónimos poco claros. Por ejemplo, `ecommerce_db` podría ser el nombre de una base de datos para un sistema de comercio electrónico.

- Nombres de Tablas: Los nombres de las tablas deben ser en plural y descriptivos de su contenido. 
  Por ejemplo, `users`, `products`, `orders`.

- Nombres de Columnas: Los nombres de las columnas deben ser descriptivos y evitar abreviaturas no estándar. 
  Por ejemplo, `user_id`, `username`, `email`, `created_at`.

Variables y Funciones

- Nombres de Variables: Las variables deben tener nombres descriptivos y seguir la convención camelCase. 
  Por ejemplo, `firstName`, `totalPrice`, `isLoggedIn`.

- Nombres de Funciones: Las funciones deben tener nombres descriptivos que indiquen su propósito y seguir la convención camelCase. 
  Por ejemplo, `calculateTotalPrice()`, `getUserById()`, `validateEmail()`.

Clases

- Nombres de Clases: Los nombres de las clases deben ser sustantivos y utilizar UpperCamelCase. 
  Por ejemplo, `User`, `Product`, `Order`.

Git

- Nombres de Ramas: Las ramas de Git deben tener nombres descriptivos y seguir el formato `tipo/tarea`. 
  Por ejemplo, `feature/login`, `bugfix/database-connection`.

- Commits: Los mensajes de commit deben ser claros y concisos, indicando el propósito del cambio en presente imperativo. 
  Por ejemplo, "Add user authentication functionality", "Fix database connection issue".

- Nombres de Etiquetas (Tags): Las etiquetas deben indicar claramente la versión del software. 
  Por ejemplo, `v1.0.0`, `v2.1.3`.

Otros

- Nombres de Archivos: Los nombres de archivos deben ser descriptivos y utilizar camelCase o kebab-case. 
  Por ejemplo, `userModel.js`, `product-controller.js`, `README.md`.

- Constantes: Las constantes deben estar en mayúsculas y usar guiones bajos para separar palabras. 
  Por ejemplo, `MAX_USERS`, `API_URL`.

